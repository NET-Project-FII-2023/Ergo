@using Ergo.App.Contracts
@using Ergo.App.ViewModels
@using Blazored.LocalStorage
@using Ergo.App.Components
@using Microsoft.AspNetCore.Components.Authorization
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="top-row ps-3 navbar navbar-dark vw-100" style="background-color: #181818">
    <div class="container-fluid">
            <a class="d-flex align-items-center justify-content-center gap-2 navbar-brand" href="">
                <img src="/images/logo.png" alt="logo" width="25px" height="25px"/>
                <span class="h3 mb-0 ml-1" style="font-size:23px; color:gainsboro;">Ergo</span>
            </a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        
        <div class="notification-btn">
            <Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState>
                <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
                    <Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized>

                        <a href="#" class="d-flex" @onclick:preventDefault="true" @onclick="ToggleNotificationsPanel">
                            <i class="bi bi-notifications" style="width:20px; height:20px;"></i>
                        </a>

                    </Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized>
                </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
            </Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState>
        </div>
        
        <div>
            <Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState>
                <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
                    <Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized>

                        <a href="/userprofile" class="d-flex">
                            <span class="bi bi-user-profile" style="width:25px; height:25px;"></span>
                        </a>

                    </Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized>
                </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
            </Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState>
        </div>
    </div>
    @if (showNotificationsPanel)
    {
        <div id="notificationPanel" class="notification-panel">
            <button class="close-button" @onclick:preventDefault="true" @onclick="CloseNotificationsPanel">
                &times;
            </button>
            <nav class="flex-column">
                <div class="nav-item px-3 mt-3" style="border-bottom: 1px solid #444745;">
                    <h2 style="font-size:22px;">Notifications</h2>
                </div>
                
                @if (inboxItems != null)
                {
                    @foreach (var inboxItem in inboxItems)
                    {
                        <div class="nav-item px-3" style="border-bottom: 1px solid #444745; padding: 10px 0;">
                            <div class="d-flex justify-content-between">
                                <p style="font-size: 0.8rem; padding-top: 2px">@inboxItem.CreatedDate.ToString("yyyy-MM-dd HH:mm")</p>
                                <div>
                                    @if (inboxItem.IsRead)
                                    {
                                        <span class="badge bg-success">Read</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-success" style="cursor: pointer" @onclick="() => MarkAsRead(inboxItem)">
                                            Mark as Read
                                        </span>
                                        <span class="badge bg-warning text-dark">Unread</span>
                                    }
                                </div>
                            </div>
                            <p style="font-size: 0.9rem">@inboxItem.Message</p>
                        </div>
                    }
                }
            </nav>
        </div>
    }
</div>

<div class="@NavMenuCssClass nav-scrollable" style=" background-color: #444745" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState>
            <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
                <Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized>

                    <div class="nav-item px-3">
                        My Projects
                    </div>
                    @if(projects != null)
                        @foreach (var project in projects)
                        {
                            <div class="nav-item px-3">
                                @if (project.IsEditing)
                                {
                                    <input type="text" @bind="project.ProjectName" />
                                    <button class="btn" @onclick="() => SaveProjectNameEdit(project)">Save</button>
                                }
                                else
                                {
                                    <div style="display:flex; flex-direction:row; justify-content:space-between;">
                                    <NavLink style="min-width:150px;" class="nav-link px-3 " href="@($"taskoverview?projectId={project.ProjectId}")">
                                        
                                        <span class="bi bi-project" aria-hidden="true"></span> @project.ProjectName
                                        
                                       
                                    </NavLink>
                                    <button class="btn" style="justify-self:end;" @onclick="() => EditProjectName(project)"><i class="bi bi-pencil"></i></button>
                                    </div>
                                   
                                }
                            </div>
                        }

                    <div class="nav-item px-3">
                        <NavLink class="nav-link px-3" href="addproject">
                            <span class="bi bi-add" aria-hidden="true"></span> Add Project
                        </NavLink>
                    </div>

                    <div class="nav-item px-3">
                        My Teams
                    </div>

                </Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized>
            </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
        </Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState>
    </nav>
</div>

@code {
    [Inject]
    public IProjectDataService ProjectDataService { get; set; }
    
    [Inject]
    public IInboxItemDataService InboxItemDataService { get; set; }
    
    [Inject]
    public IUserDataService UserDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public List<ProjectViewModel> projects { get; set; } = new List<ProjectViewModel>();
    
    public List<InboxItemViewModel> inboxItems { get; set; } = new List<InboxItemViewModel>();

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    
    private bool showNotificationsPanel = false;

    private string Message { get; set; } = string.Empty;
}

@functions
{
    private async Task SaveProjectNameEdit(ProjectViewModel selectedProject)
    {
        if (selectedProject != null)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity.IsAuthenticated)
            {
                var username = user.Identity.Name; 

                selectedProject.IsEditing = false;
                selectedProject.ModifiedBy = username; 

                var updateProjectDto = new ProjectViewModel
                    {
                        ProjectId = selectedProject.ProjectId,
                        ProjectName = selectedProject.ProjectName,
                        Description = selectedProject.Description,
                        GitRepository = selectedProject.GitRepository,
                        ModifiedBy = selectedProject.ModifiedBy,
                        Deadline = selectedProject.Deadline,
                        State = selectedProject.State,
                    };

                var result = await ProjectDataService.UpdateProjectAsync(updateProjectDto);

                if (result.IsSuccess)
                {
                    Message = "Project name updated successfully";
                }
                else
                {
                    Message = "Failed to update project name";
                }
            }
            else
            {
                Console.WriteLine("Utilizatorul nu este autentificat");
               
            }
            
            //send notification to all team members
            var users = await UserDataService.GetAssignedUsersByProjectId(selectedProject.ProjectId);
            foreach (var usr in users)
            {
                var inboxItem = new InboxItemViewModel
                {
                    Message = $"Project name changed to {selectedProject.ProjectName}",
                    IsRead = false,
                    CreatedDate = DateTime.Now,
                    UserId = usr.UserId
                };
                await InboxItemDataService.CreateInboxItemAsync(inboxItem);
            }
        }
    }




        private void EditProjectName(ProjectViewModel project)
        {
            project.IsEditing = true;
         } 

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorageService.GetItemAsync<string>("token");

        if (token != null)
        {
            try
            {
                projects = await ProjectDataService.GetProjectsByUserIdFromTokenAsync();
                inboxItems = await InboxItemDataService.GetInboxItemsByUserIdFromTokenAsync();
                //sort inbox items by date
                inboxItems = inboxItems.OrderByDescending(i => i.CreatedDate).ToList();

            }
            catch (UnauthorizedAccessException)
            {
                await LocalStorageService.RemoveItemAsync("token");
                NavigationManager.NavigateTo("/login", true);
            }
        }
    }
    
    private void ToggleNotificationsPanel()
    {
        showNotificationsPanel = !showNotificationsPanel;
    }
    
    private void CloseNotificationsPanel()
    {
        showNotificationsPanel = false;
    }
    
    private async Task MarkAsRead(InboxItemViewModel inboxItem)
    {
        try
        {
            InboxItemViewModel newInboxItem = new InboxItemViewModel
            {
                InboxItemId = inboxItem.InboxItemId,
                Message = inboxItem.Message,
                IsRead = true,
                CreatedDate = inboxItem.CreatedDate,
                UserId = inboxItem.UserId
            };
            await InboxItemDataService.UpdateInboxItemAsync(newInboxItem);
            
            var index = inboxItems.FindIndex(i => i.InboxItemId == inboxItem.InboxItemId);
            if (index != -1)
            {
                inboxItems[index] = newInboxItem;
            }
            
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    
}
