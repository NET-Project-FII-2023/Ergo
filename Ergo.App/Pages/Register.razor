@page "/register"
@using Ergo.App.Auth
@using Ergo.App.ViewModels
@using System.Text.Json
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-4">
            <h1 class="h2 font-weight-normal login-title text-center">
                Register
            </h1>

            <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="registerRequest">
                <DataAnnotationsValidator />

                <label for="inputUsername" class="sr-only">Username</label>
                <InputText id="inputUsername" class="form-control" @bind-Value="registerRequest.Username" autofocus placeholder="Username" />
                <ValidationMessage For="@(() => registerRequest.Username)" />

                <label for="inputUsername" class="sr-only">Name</label>
                <InputText id="inputName" class="form-control" @bind-Value="registerRequest.Name" autofocus placeholder="Name" />
                <ValidationMessage For="@(() => registerRequest.Name)" />

                <label for="inputEmail" class="sr-only">Email</label>
                <InputText type="email" id="inputEmail" class="form-control" placeholder="Email" @bind-Value="registerRequest.Email" />
                <ValidationMessage For="@(() => registerRequest.Email)" />


                <label for="inputPassword" class="sr-only">Password</label>
                <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="registerRequest.Password" />
                <ValidationMessage For="@(() => registerRequest.Password)" />
                <label for="inputConfirmPassword" class="sr-only">Confirm Password</label>
                <InputText type="password" id="inputConfirmPassword" class="form-control" placeholder="Confirm password" @bind-Value="registerRequest.ConfirmPassword" />
                <ValidationMessage For="@(() => registerRequest.ConfirmPassword)" />

                <br />
                <div class="text-center">
                    <button class="btn btn-lg btn-primary btn-block" type="submit" onclick="OnClickHandler">Sign up</button>
                </div>

                <NavLink href="login">
                    <h6 class="font-weight-normal navigation-link text-center">Sign in</h6>
                </NavLink>
            </EditForm>
        </div>
    </div>
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">Login Error</strong>
                    <button type="button" class="btn-close" @onclick="DismissError" aria-label="Close"></button>
                </div>
                <div class="toast-body" style="color:red">
                    @error
                </div>
            </div>
        </div>
    }
</div>
@code {
    RegisterViewModel registerRequest { get; set; } = new RegisterViewModel();
    string error { get; set; }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            await authStateProvider.Register(registerRequest);
            navigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            error = ParseErrorResponse(ex.Message);
        }
    }
    private string ParseErrorResponse(string jsonError)
    {

        try
        {
            var errorResponse = JsonSerializer.Deserialize<ValidationErrorResponse>(jsonError);
            if (errorResponse?.Errors != null)
            {
                return string.Join(", ", errorResponse.Errors
                    .SelectMany(pair => pair.Value)
                    .ToArray());
            }
        }
        catch (JsonException)
        {
            // Optional: handle JSON parsing errors if necessary
        }
        return jsonError;
    }

    private void DismissError()
    {
        error = null;
    }
}