@page "/taskoverview"
@using Ergo.App.Contracts
@using Ergo.App.ViewModels
@using Ergo.Domain.Entities.Enums;
@using BlazorBootstrap

<style>
    body {
        background-color: #1f1f1f; 
        color: #e0e0e0; 
    }

    .col-md-3 {
        background-color: #333; 
        border-radius: 8px; 
        padding: 20px; 
        margin-bottom: 20px;
        margin-right: 20px;
    }

    .card {
        background-color: #444; 
        color: #ccc; 
        border: none;
        margin-bottom: 20px; 
        padding: 10px;
        position: static;
    }

    h4 {
        color: #fff;
    }

    .col-md-3:nth-child(1) h4 {
        border-bottom: 3px solid #d1c04d;
        border-radius: 2px;
    }

    .col-md-3:nth-child(2) h4 {
        border-bottom: 3px solid #4d91d1;
        border-radius: 2px;
    }

    .col-md-3:nth-child(3) h4 {
        border-bottom: 3px solid #60a88b;
        border-radius: 2px;
    }
</style>


<h3>Task Overview</h3>
<br />

@if (Tasks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Modal @ref="modal" Title
    ="Assign a task to this project:">
        <BodyTemplate>
            <EditForm Model="@TaskViewModel">

                <DataAnnotationsValidator />
                <ValidationSummary></ValidationSummary>

                <div class="row mb-3 ms-2">
                    <label for="taskname" class="col-sm-3 form-label" style="color:black;">Task name:</label>
                    <div class="col-sm-7">
                        <InputText id="taskname" class="form-control" @bind-Value="@TaskViewModel.TaskName" placeholder="Task name..."></InputText>
                        <ValidationMessage For="@(() => TaskViewModel.TaskName)" />
                    </div>
                </div>

                <div class="row mb-3 ms-2">
                    <label for="taskdescription" class="col-sm-3 form-label" style="color:black;">Task description:</label>
                    <div class="col-sm-7">
                        <InputTextArea @bind-Value="@TaskViewModel.Description" class="form-control" rows="5" placeholder="Task description..."
                        @oninput="UpdateCharacterCount"></InputTextArea>
                        <div style="position: relative;">
                            @if (TaskViewModel != null && TaskViewModel.Description != null)
                            {
                                <span style="position: absolute; bottom: 8px; right: 8px; color: gray;">
                                    @TaskViewModel.Description.Length/@maxCharacters
                                </span>
                            }
                        </div>
                        <ValidationMessage For="@(() => TaskViewModel.Description)" />
                    </div>
                </div>

                <div class="row mb-3 ms-2">
                    <label for="deadline" class="col-sm-3 form-label" style="color:black;">Deadline:</label>
                    <div class="col-sm-7">
                        <InputDate id="deadline" class="form-control" @bind-Value="@TaskViewModel.Deadline" />
                        <ValidationMessage For="@(() => TaskViewModel.Deadline)" />
                    </div>
                </div>

                <div class="d-flex justify-content-end">
                    <button class="btn btn-primary" @onclick="OnHideModalClick">Cancel</button>
                    <button type="submit" class="btn btn-primary mx-1" @onclick="HandleValidSubmit">Save task</button>
                </div>

            </EditForm>
        </BodyTemplate>
    </Modal>

    @if (Message != null)
    {
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">Success</strong>
                    <button type="button" class="btn-close" @onclick="DismissSuccess" aria-label="Close"></button>
                </div>
                <div class="toast-body" style="color:green">
                    @Message
                </div>
            </div>
        </div>
    }

    <Button Color="ButtonColor.Primary" @onclick="OnShowModalClick">Add Task</Button>
    <div class="row mt-2">
        <div class="col-md-3">
            <h4>To Do</h4>
            @foreach (var taskItem in Tasks.Where(task => task.State == TaskState.ToDo))
            {
                <div class="card mb-3" @onclick="() => DisplayTaskId(taskItem.TaskItemId)">
                    <div class="card-body">
                        <h5 class="card-title">@taskItem.TaskName</h5>
                        <p class="card-text">@taskItem.Description</p>
                        <p class="card-text"><strong>Deadline:</strong> @taskItem.Deadline.ToShortDateString()</p>
                        <button class="btn btn-secondary" @onclick="() => ShowCommentModal(taskItem.TaskItemId)">Add Comment</button>

                    </div>
                </div>
            }
        </div>

        <div class="col-md-3">
            <h4>In Progress</h4>
            @foreach (var taskItem in Tasks.Where(task => task.State == TaskState.InProgress))
            {
                <div class="card mb-3" @onclick="() => DisplayTaskId(taskItem.TaskItemId)">
                    <div class="card-body">
                        <h5 class="card-title">@taskItem.TaskName</h5>
                        <p class="card-text">@taskItem.Description</p>
                        <p class="card-text"><strong>Deadline:</strong> @taskItem.Deadline.ToShortDateString()</p>
                    </div>
                </div>
            }
        </div>

        <div class="col-md-3">
            <h4>Done</h4>
            @foreach (var taskItem in Tasks.Where(task => task.State == TaskState.Done))
            {
                <div class="card mb-3" @onclick="() => DisplayTaskId(taskItem.TaskItemId)">
                    <div class="card-body">
                        <h5 class="card-title">@taskItem.TaskName</h5>
                        <p class="card-text">@taskItem.Description</p>
                        <p class="card-text"><strong>Deadline:</strong> @taskItem.Deadline.ToShortDateString()</p>
                    </div>
                </div>
            }
        </div>
    </div>


    <Modal @ref="commentModal" Title="Add a comment:">
        <BodyTemplate>
            <EditForm Model="@CommentViewModel">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <InputTextArea @bind-Value="@CommentViewModel.CommentText" class="form-control" rows="3" placeholder="Your comment..."></InputTextArea>
                </div>

                <div class="d-flex justify-content-end">
                    <button class="btn btn-primary" @onclick="HideCommentModal">Cancel</button>
                    <button type="submit" class="btn btn-primary mx-1" @onclick="SaveComment">Save Comment</button>
                </div>
            </EditForm>
        </BodyTemplate>
    </Modal>

}

@code {
    [Inject]
    public ITaskDataService TaskDataService { get; set; }

    [Inject] ICommentDataService CommentDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public List<TaskViewModel> Tasks { get; set; }

    public TaskViewModel TaskViewModel { get; set; } = new TaskViewModel();

    public CommentViewModel CommentViewModel { get; set; } = new CommentViewModel();

    public string Message { get; set; }

    private Modal modal = default!;

    private int maxCharacters = 500;

    private Guid selectedTaskId;

    private Modal commentModal = default!;
    private Guid selectedTaskForComment;

    private void DisplayTaskId(Guid taskId)
    {
        selectedTaskId = taskId;

    }

    private async Task HideCommentModal()
    {
        await commentModal.HideAsync();
        Console.WriteLine("A mers sa se inchida");
    }

    private async Task SaveComment()
    {
        try
		{
			var username = await TaskDataService.GetUsernameFromTokenAsync();

			if (string.IsNullOrEmpty(username))
			{
				Message = "Unable to retrieve user email from token.";
				return;
			}

			CommentViewModel.CreatedBy = username;
            CommentViewModel.LastModifiedBy = username;
			CommentViewModel.TaskId = selectedTaskId;
			var result = await CommentDataService.CreateCommentAsync(CommentViewModel);
			if (result.IsSuccess)
			{
				Message = "Comment created successfully";
				await commentModal.HideAsync();
				
			}
			else
			{
				Message = result.Message;
				if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
				{
					Message += result.ValidationErrors;
				}
			}
		}
		catch (Exception ex)
		{
			Message = $"Error creating comment: {ex.Message}";
		}
    }

    private async Task ShowCommentModal(Guid taskId)
    {
        CommentViewModel.TaskId = taskId;
        Console.WriteLine(CommentViewModel.TaskId);
        await commentModal.ShowAsync();
    }


    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    private void UpdateCharacterCount(ChangeEventArgs e)
    {
        TaskViewModel.Description = e.Value.ToString();

        if (TaskViewModel.Description.Length > maxCharacters)
        {
            TaskViewModel.Description = TaskViewModel.Description.Substring(0, maxCharacters);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = uri.Query;

        TaskViewModel.Deadline = DateTime.UtcNow.Date;

        if (!string.IsNullOrEmpty(query))
        {
            var queryParams = System.Web.HttpUtility.ParseQueryString(query);
            var projectId = queryParams.Get("projectId");

            if (!string.IsNullOrEmpty(projectId))
            {
                Tasks = await TaskDataService.GetTasksByProjectIdAsync(Guid.Parse(projectId));
                Console.WriteLine("ProjectId: " + projectId);
            }
        }
    }

    private async Task FetchAllTasks()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = uri.Query;

        TaskViewModel.Deadline = DateTime.UtcNow.Date;

        if (!string.IsNullOrEmpty(query))
        {
            var queryParams = System.Web.HttpUtility.ParseQueryString(query);
            var projectId = queryParams.Get("projectId");

            if (!string.IsNullOrEmpty(projectId))
            {
                Tasks = await TaskDataService.GetTasksByProjectIdAsync(Guid.Parse(projectId));
                Console.WriteLine("ProjectId: " + projectId);
            }
        }
    }

    private void DismissSuccess()
    {
        Message = null;
    }
    private async Task HandleValidSubmit()
    {

        if (DateTime.TryParse(TaskViewModel.Deadline.ToString(), out DateTime inputDate))
        {
            TaskViewModel.Deadline = inputDate.ToUniversalTime();
        }
        else
        {
            Message = "Invalid date format. Please enter a valid date.";
            return;
        }

        try
        {
            var username = await TaskDataService.GetUsernameFromTokenAsync();

            if (string.IsNullOrEmpty(username))
            {
                Message = "Unable to retrieve user email from token.";
                return;
            }


            TaskViewModel.CreatedBy = username;
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var query = uri.Query;
            if (!string.IsNullOrEmpty(query))
            {
                var queryParams = System.Web.HttpUtility.ParseQueryString(query);
                var projectId = queryParams.Get("projectId");

                if (!string.IsNullOrEmpty(projectId))
                {
                    Tasks = await TaskDataService.GetTasksByProjectIdAsync(Guid.Parse(projectId));
                    Console.WriteLine("ProjectId: " + projectId);
                }
                TaskViewModel.ProjectId= Guid.Parse(projectId);
            }

            var result = await TaskDataService.CreateTaskAsync(TaskViewModel);
            if (result.IsSuccess)
            {
                Message = "Task created successfully";
                await modal.HideAsync();
                await FetchAllTasks();
                // NavigationManager.NavigateTo($"taskoverview?projectId={TaskViewModel.ProjectId}");
            }
            else
            {
                Message = result.Message;
                if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
                {
                    Message += result.ValidationErrors;
                }
            }
        }
        catch (Exception ex)
        {
            Message = $"Error creating task: {ex.Message}";
        }




}

}