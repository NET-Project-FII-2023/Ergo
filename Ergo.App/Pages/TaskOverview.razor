@page "/taskoverview"
@using Ergo.App.Contracts
@using Ergo.App.ViewModels
@using Ergo.Domain.Entities.Enums;
@using BlazorBootstrap
@using Ergo.App.Components

<style>
    body {
        background-color: #1f1f1f; 
        color: #e0e0e0; 
    }

    .col-md-3 {
        background-color: #333; 
        border-radius: 8px; 
        padding: 20px; 
        margin-bottom: 20px;
        margin-right: 20px;
    }

    .card {
        background-color: #444; 
        color: #ccc; 
        border: none;
        margin-bottom: 20px; 
        padding: 10px;
        position: static;
    }

    h4 {
        color: #fff;
    }

    .col-md-3:nth-child(1) h4 {
        border-bottom: 3px solid #d1c04d;
        border-radius: 2px;
    }

    .col-md-3:nth-child(2) h4 {
        border-bottom: 3px solid #4d91d1;
        border-radius: 2px;
    }

    .col-md-3:nth-child(3) h4 {
        border-bottom: 3px solid #60a88b;
        border-radius: 2px;
    }

    .bg-dark {
        background-color: #333 !important; 
    }

    .text-light {
        color: #ccc !important; 
    }

    .bg-secondary {
        background-color: #444 !important;
    }

    .fa-pencil {
        color: #d1c04d;
        font-size: 1rem; 
    }


    .btn-success {
        color: #fff;
        background-color: #28a745;
        border-color: #28a745; 
    }

    .btn-warning {
        color: #212529;
        background-color: #ffc107;
        border-color: #ffc107;
    }
   


</style>


<h3>Task Overview</h3>
<br />

@if (Tasks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <TaskAssignmentModal OnTaskCreated="HandleTaskCreated"></TaskAssignmentModal>
    @if (Message != null)
    {
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">Success</strong>
                    <button type="button" class="btn-close" @onclick="DismissSuccess" aria-label="Close"></button>
                </div>
                <div class="toast-body" style="color:green">
                    @Message
                </div>
            </div>
        </div>
    }
    <div class="row mt-2">
        <div class="col-md-3">
            <h4>To Do</h4>
            @foreach (var taskItem in Tasks.Where(task => task.State == TaskState.ToDo))
            {
                <div class="card mb-3" @onclick="() => DisplayTaskId(taskItem.TaskItemId)">
                    <div class="card-body">
                        <h5 class="card-title">@taskItem.TaskName</h5>
                        <p class="card-text">@taskItem.Description</p>
                        <p class="card-text"><strong>Deadline:</strong> @taskItem.Deadline.ToShortDateString()</p>
                        <button class="btn btn-secondary" @onclick="() => ShowCommentModal(taskItem.TaskItemId)">Add Comment</button>
                        <Button class="btn btn-secondary" @onclick="() => ShowDetailsModal(taskItem.TaskItemId)">Details</Button>


                    </div>
                </div>
            }
        </div>

        <div class="col-md-3">
            <h4>In Progress</h4>
            @foreach (var taskItem in Tasks.Where(task => task.State == TaskState.InProgress))
            {
                <div class="card mb-3" @onclick="() => DisplayTaskId(taskItem.TaskItemId)">
                    <div class="card-body">
                        <h5 class="card-title">@taskItem.TaskName</h5>
                        <p class="card-text">@taskItem.Description</p>
                        <p class="card-text"><strong>Deadline:</strong> @taskItem.Deadline.ToShortDateString()</p>
                    </div>
                </div>
            }
        </div>

        <div class="col-md-3">
            <h4>Done</h4>
            @foreach (var taskItem in Tasks.Where(task => task.State == TaskState.Done))
            {
                <div class="card mb-3" @onclick="() => DisplayTaskId(taskItem.TaskItemId)">
                    <div class="card-body">
                        <h5 class="card-title">@taskItem.TaskName</h5>
                        <p class="card-text">@taskItem.Description</p>
                        <p class="card-text"><strong>Deadline:</strong> @taskItem.Deadline.ToShortDateString()</p>
                    </div>
                </div>
            }
        </div>
    </div>


    <Modal @ref="commentModal" Title="Add a comment:">
        <BodyTemplate>
            <EditForm Model="@CommentViewModel">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <InputTextArea @bind-Value="@CommentViewModel.CommentText" class="form-control" rows="3" placeholder="Your comment..."></InputTextArea>
                </div>

                <div class="d-flex justify-content-end">
                    <button class="btn btn-primary" @onclick="HideCommentModal">Cancel</button>
                    <button type="submit" class="btn btn-primary mx-1" @onclick="SaveComment">Save Comment</button>
                </div>
            </EditForm>
        </BodyTemplate>
    </Modal>

    <Modal @ref="detailsModal" Title="Task Details">
        <BodyTemplate>
            <div class="modal-body bg-dark text-light">
                <h5>@selectedTask?.TaskName</h5>
                <p>@selectedTask?.Description</p>

                <h6>Comments:</h6>
                <ul class="list-unstyled">
                    @foreach (var comment in commentsList)
                    {
                        <li class="mb-2" title="Last modified: @comment.LastModifiedDate.ToString()">
                            @if (commentBeingEdited != null && commentBeingEdited.CommentId == comment.CommentId)
                            {
                                <textarea class="form-control bg-secondary text-light" @bind="commentBeingEdited.CommentText"></textarea>
                                <div class="mt-2">
                                    <button class="btn btn-success btn-sm" @onclick="SaveCommentEdit">Save</button>
                                    <button class="btn btn-warning btn-sm" @onclick="CancelCommentEdit">Cancel</button>
                                </div>
                            }
                            else
                            {
                                <div class="d-flex justify-content-between align-items-center bg-secondary p-2 rounded">
                                    <div>
                                        <strong>@comment.CreatedBy:</strong> @comment.CommentText
                                    </div>
                                    @if (comment.CanEdit)
                                    {
                                        <button class="btn btn-outline-info btn-sm" @onclick="() => BeginEditComment(comment)">Edit</button>
                                    }
                                </div>
                            }
                        </li>
                    }
                </ul>
            </div>
        </BodyTemplate>
    </Modal>





}

@code {
    [Inject]
    public ITaskDataService TaskDataService { get; set; }

    [Inject] ICommentDataService CommentDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public List<TaskViewModel> Tasks { get; set; }

    private List<CommentViewModel> commentsList = new List<CommentViewModel>();

    public TaskViewModel TaskViewModel { get; set; } = new TaskViewModel();

    private TaskViewModel? selectedTask;

    public CommentViewModel CommentViewModel { get; set; } = new CommentViewModel();

    private CommentViewModel? commentBeingEdited;

    public string Message { get; set; }

    private Modal modal = default!;

    private Guid selectedTaskId;

    private Modal commentModal = default!;

    private Modal detailsModal = default!;


    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = uri.Query;

        TaskViewModel.Deadline = DateTime.UtcNow.Date;

        if (!string.IsNullOrEmpty(query))
        {
            var queryParams = System.Web.HttpUtility.ParseQueryString(query);
            var projectId = queryParams.Get("projectId");

            if (!string.IsNullOrEmpty(projectId))
            {
                Tasks = await TaskDataService.GetTasksByProjectIdAsync(Guid.Parse(projectId));
                Console.WriteLine("ProjectId: " + projectId);
            }
        }
    }

    private void BeginEditComment(CommentViewModel comment)
    {

        commentBeingEdited = comment;
    }

    private async Task SaveCommentEdit()
    {
        var username = await TaskDataService.GetUsernameFromTokenAsync();
        if(string.IsNullOrEmpty(username))
        {
            Message = "Unable to retrieve user email from token.";
            return;
        }

        if (commentBeingEdited != null)
        {

            var updateCommentDto = new UpdateCommentDto
                {
                    CommentId = commentBeingEdited.CommentId,
                    CreatedBy = username,
                    CommentText = commentBeingEdited.CommentText,
                    LastModifiedBy = username, 
                    LastModifiedDate = DateTime.UtcNow,
                    TaskId= commentBeingEdited.TaskId

                };
            
            var response = await CommentDataService.UpdateCommentAsync(updateCommentDto);

            if (response.IsSuccess)
            {
                Message = "Comment updated successfully";
                
                await detailsModal.HideAsync();
            }
            else
            {
                Message = response.Message;
                if (!string.IsNullOrWhiteSpace(response.ValidationErrors))
                {
                    Message += response.ValidationErrors;
                }

            }

            commentBeingEdited = null; 
        }
    }


    private void CancelCommentEdit()
    {
        commentBeingEdited = null; 
    }



    private async Task ShowDetailsModal(Guid taskId)
    {
        selectedTask = Tasks.FirstOrDefault(t => t.TaskItemId == taskId);

        var comments = await CommentDataService.GetCommentsByTaskIdAsync(taskId);
        
        var currentUser = await TaskDataService.GetUsernameFromTokenAsync();


        commentsList = comments.Select(comment => new CommentViewModel
            {
                CommentText = comment.CommentText,
                CreatedBy = comment.CreatedBy,
                LastModifiedDate = comment.LastModifiedDate,
                CanEdit = ShouldAllowEdit(comment, currentUser)
            }).ToList();

        await detailsModal.ShowAsync();
    }


    private bool ShouldAllowEdit(CommentViewModel comment, string currentUser)
    {
        return comment.CreatedBy == currentUser;
    }


    private void DisplayTaskId(Guid taskId)
    {
        selectedTaskId = taskId;

    }

    private async Task HideCommentModal()
    {
        await commentModal.HideAsync();
        Console.WriteLine("A mers sa se inchida");
    }

    private async Task SaveComment()
    {
        try
        {
            var username = await TaskDataService.GetUsernameFromTokenAsync();

            if (string.IsNullOrEmpty(username))
            {
                Message = "Unable to retrieve user email from token.";
                return;
            }

            CommentViewModel.CreatedBy = username;
            CommentViewModel.LastModifiedBy = username;
            CommentViewModel.TaskId = selectedTaskId;
            var result = await CommentDataService.CreateCommentAsync(CommentViewModel);
            if (result.IsSuccess)
            {
                Message = "Comment created successfully";
                await commentModal.HideAsync();

            }
            else
            {
                Message = result.Message;
                if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
                {
                    Message += result.ValidationErrors;
                }
            }
        }
        catch (Exception ex)
        {
            Message = $"Error creating comment: {ex.Message}";
        }
    }

    private async Task HandleTaskCreated()
    {
        await FetchAllTasks();
    }

    private async Task ShowCommentModal(Guid taskId)
    {
        CommentViewModel.TaskId = taskId;
        Console.WriteLine(CommentViewModel.TaskId);
        await commentModal.ShowAsync();
    }


    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

   

    private async Task FetchAllTasks()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = uri.Query;

        TaskViewModel.Deadline = DateTime.UtcNow.Date;

        if (!string.IsNullOrEmpty(query))
        {
            var queryParams = System.Web.HttpUtility.ParseQueryString(query);
            var projectId = queryParams.Get("projectId");

            if (!string.IsNullOrEmpty(projectId))
            {
                Tasks = await TaskDataService.GetTasksByProjectIdAsync(Guid.Parse(projectId));
                Console.WriteLine("ProjectId: " + projectId);
            }
        }
    }



    private void DismissSuccess()
    {
        Message = null;
    }
}