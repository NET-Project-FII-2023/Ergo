@page "/taskoverview"
@using Ergo.App.Contracts
@using Ergo.App.ViewModels
@using Ergo.Domain.Entities.Enums;
@using BlazorBootstrap

<style>
    body {
        background-color: #1f1f1f;
        color: #e0e0e0;
    }

    .col-md-3 {
        background-color: #333;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        margin-right: 20px;
    }

    .card {
        background-color: #444;
        color: #ccc;
        border: none;
        margin-bottom: 20px;
        padding: 10px;
        position: static;
    }

    h4 {
        color: #fff;
    }

    .col-md-3:nth-child(1) h4 {
        border-bottom: 3px solid #d1c04d;
        border-radius: 2px;
    }

    .col-md-3:nth-child(2) h4 {
        border-bottom: 3px solid #4d91d1;
        border-radius: 2px;
    }

    .col-md-3:nth-child(3) h4 {
        border-bottom: 3px solid #60a88b;
        border-radius: 2px;
    }
</style>


<h3>Task Overview</h3>
<br />

@if (Tasks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Modal @ref="taskModal" Title="Assign a task to this project:">
        <BodyTemplate>
            <EditForm Model="@TaskViewModel">

                <DataAnnotationsValidator />
                <ValidationSummary></ValidationSummary>

                <div class="row mb-3 ms-2">
                    <label for="taskname" class="col-sm-3 form-label" style="color:black;">Task name:</label>
                    <div class="col-sm-7">
                        <InputText id="taskname" class="form-control" @bind-Value="@TaskViewModel.TaskName" placeholder="Task name..."></InputText>
                        <ValidationMessage For="@(() => TaskViewModel.TaskName)" />
                    </div>
                </div>

                <div class="row mb-3 ms-2">
                    <label for="taskdescription" class="col-sm-3 form-label" style="color:black;">Task description:</label>
                    <div class="col-sm-7">
                        <InputTextArea @bind-Value="@TaskViewModel.Description" class="form-control" rows="5" placeholder="Task description..."
                                       @oninput="UpdateCharacterCount"></InputTextArea>
                        <div style="position: relative;">
                            @if (TaskViewModel != null && TaskViewModel.Description != null)
                            {
                                <span style="position: absolute; bottom: 8px; right: 8px; color: gray;">
                                    @TaskViewModel.Description.Length/@maxCharacters
                                </span>
                            }
                        </div>
                        <ValidationMessage For="@(() => TaskViewModel.Description)" />
                    </div>
                </div>

                <div class="row mb-3 ms-2">
                    <label for="deadline" class="col-sm-3 form-label" style="color:black;">Deadline:</label>
                    <div class="col-sm-7">
                        <InputDate id="deadline" class="form-control" @bind-Value="@TaskViewModel.Deadline" />
                        <ValidationMessage For="@(() => TaskViewModel.Deadline)" />
                    </div>
                </div>

                <div class="d-flex justify-content-end">
                    <button class="btn btn-primary" @onclick="OnHideTaskModalClick">Cancel</button>
                    <button type="submit" class="btn btn-primary mx-1" @onclick="HandleValidTaskSubmit">Save task</button>
                </div>

            </EditForm>
        </BodyTemplate>
    </Modal>
    <Modal @ref="userModal" Title="Add a user to this project:">
        <BodyTemplate>
            <EditForm Model="@ProjectAssignUserViewModel">

                <DataAnnotationsValidator />
                <ValidationSummary></ValidationSummary>

                <div class="row mb-3 ms-2">
                    <label for="taskname" class="col-sm-3 form-label" style="color:black;">User email:</label>
                    <div class="col-sm-7">
                        <InputText id="username" class="form-control" @bind-Value="@ProjectAssignUserViewModel.Email" placeholder="User email..."></InputText>
                        <ValidationMessage For="@(() => ProjectAssignUserViewModel.Email)" />
                    </div>
                </div>


                <div class="d-flex justify-content-end">
                    <button class="btn btn-primary" @onclick="OnHideUserModalClick">Cancel</button>
                    <button type="submit" class="btn btn-primary mx-1" @onclick="HandleValidUserSubmit">Add user</button>
                </div>

            </EditForm>
        </BodyTemplate>
    </Modal>

    @if (Message != null)
    {
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">Success</strong>
                    <button type="button" class="btn-close" @onclick="DismissSuccess" aria-label="Close"></button>
                </div>
                <div class="toast-body" style="color:green">
                    @Message
                </div>
            </div>
        </div>
    }
    @if (Error != null)
    {
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">Error</strong>
                    <button type="button" class="btn-close" @onclick="DismissError" aria-label="Close"></button>
                </div>
                <div class="toast-body" style="color:red">
                    @Error
                </div>
            </div>
        </div>
    }

    <Button Color="ButtonColor.Primary" @onclick="OnShowTaskModalClick">Add Task</Button>
    <Button Color="ButtonColor.Primary" @onclick="OnShowUserModalClick">Add User</Button>

    <div class="row mt-2">
        <div class="col-md-3">
            <h4>To Do</h4>
            @foreach (var taskItem in Tasks.Where(task => task.State == TaskState.ToDo))
            {
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">@taskItem.TaskName</h5>
                        <p class="card-text">@taskItem.Description</p>
                        <p class="card-text"><strong>Deadline:</strong> @taskItem.Deadline.ToShortDateString()</p>
                    </div>
                </div>
            }
        </div>

        <div class="col-md-3">
            <h4>In Progress</h4>
            @foreach (var taskItem in Tasks.Where(task => task.State == TaskState.InProgress))
            {
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">@taskItem.TaskName</h5>
                        <p class="card-text">@taskItem.Description</p>
                        <p class="card-text"><strong>Deadline:</strong> @taskItem.Deadline.ToShortDateString()</p>
                    </div>
                </div>
            }
        </div>

        <div class="col-md-3">
            <h4>Done</h4>
            @foreach (var taskItem in Tasks.Where(task => task.State == TaskState.Done))
            {
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">@taskItem.TaskName</h5>
                        <p class="card-text">@taskItem.Description</p>
                        <p class="card-text"><strong>Deadline:</strong> @taskItem.Deadline.ToShortDateString()</p>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    [Inject]
    public ITaskDataService TaskDataService { get; set; }
    [Inject]
    public IUserDataService UserDataService { get; set; }
    [Inject]
    public IProjectDataService ProjectDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public List<TaskViewModel> Tasks { get; set; }

    public TaskViewModel TaskViewModel { get; set; } = new TaskViewModel();
    public ProjectAssignUserViewModel ProjectAssignUserViewModel { get; set; } = new ProjectAssignUserViewModel();

    public string Message { get; set; }
    public string Error { get; set;}

    private Modal taskModal = default!;
    private Modal userModal = default!;

    private string projectId = default!;

    private int maxCharacters = 500;

    private async Task OnShowTaskModalClick()
    {
        await taskModal.ShowAsync();
    }
    private async Task OnShowUserModalClick()
    {
        await userModal.ShowAsync();
    }

    private async Task OnHideTaskModalClick()
    {
        await taskModal.HideAsync();
    }
    private async Task OnHideUserModalClick()
    {
        await userModal.HideAsync();
    }

    private void UpdateCharacterCount(ChangeEventArgs e)
    {
        TaskViewModel.Description = e.Value.ToString();

        if (TaskViewModel.Description.Length > maxCharacters)
        {
            TaskViewModel.Description = TaskViewModel.Description.Substring(0, maxCharacters);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = uri.Query;

        TaskViewModel.Deadline = DateTime.UtcNow.Date;

        if (!string.IsNullOrEmpty(query))
        {
            var queryParams = System.Web.HttpUtility.ParseQueryString(query);
            projectId = queryParams.Get("projectId");

            if (!string.IsNullOrEmpty(projectId))
            {
                Tasks = await TaskDataService.GetTasksByProjectIdAsync(Guid.Parse(projectId));
                Console.WriteLine("ProjectId: " + projectId);
            }
        }
    }

    private async Task FetchAllTasks()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = uri.Query;

        TaskViewModel.Deadline = DateTime.UtcNow.Date;

        if (!string.IsNullOrEmpty(query))
        {
            var queryParams = System.Web.HttpUtility.ParseQueryString(query);
            var projectId = queryParams.Get("projectId");

            if (!string.IsNullOrEmpty(projectId))
            {
                Tasks = await TaskDataService.GetTasksByProjectIdAsync(Guid.Parse(projectId));
                Console.WriteLine("ProjectId: " + projectId);
            }
        }
    }

    private void DismissSuccess()
    {
        Message = null;
    }
    private void DismissError()
    {
        Error = null;
    }
    private async Task HandleValidTaskSubmit()
    {

        if (DateTime.TryParse(TaskViewModel.Deadline.ToString(), out DateTime inputDate))
        {
            TaskViewModel.Deadline = inputDate.ToUniversalTime();
        }
        else
        {
            Message = "Invalid date format. Please enter a valid date.";
            return;
        }

        try
        {
            var username = await TaskDataService.GetUsernameFromTokenAsync();

            if (string.IsNullOrEmpty(username))
            {
                Message = "Unable to retrieve user email from token.";
                return;
            }


            TaskViewModel.CreatedBy = username;
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var query = uri.Query;
            if (!string.IsNullOrEmpty(query))
            {
                var queryParams = System.Web.HttpUtility.ParseQueryString(query);
                var projectId = queryParams.Get("projectId");

                if (!string.IsNullOrEmpty(projectId))
                {
                    Tasks = await TaskDataService.GetTasksByProjectIdAsync(Guid.Parse(projectId));
                    Console.WriteLine("ProjectId: " + projectId);
                }
                TaskViewModel.ProjectId = Guid.Parse(projectId);
            }

            var result = await TaskDataService.CreateTaskAsync(TaskViewModel);
            if (result.IsSuccess)
            {
                Message = "Task created successfully";
                await taskModal.HideAsync();
                await FetchAllTasks();
                // NavigationManager.NavigateTo($"taskoverview?projectId={TaskViewModel.ProjectId}");
            }
            else
            {
                Message = result.Message;
                if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
                {
                    Message += result.ValidationErrors;
                }
            }
        }
        catch (Exception ex)
        {
            Message = $"Error creating task: {ex.Message}";
        }
    }
    private async Task HandleValidUserSubmit()
    {
        try
        {
            var email = ProjectAssignUserViewModel.Email;
            var userId = await UserDataService.GetUserIdByEmailAsync(email);

        if (userId == null)
        {
            Error = "User not found.";
            return;
        }
            ProjectAssignUserViewModel.ProjectId = projectId;
            ProjectAssignUserViewModel.UserId = userId;

            var projects = await ProjectDataService.GetProjectsByUserIdAsync(userId);
            foreach (var project in projects)
            {
                if (project.ProjectId == Guid.Parse(projectId))
                {
                    Error = "User is already assigned to this project.";
                    return;
                }
            }

            var result = await ProjectDataService.AssignUserToProjectAsync(ProjectAssignUserViewModel);
            if (result.IsSuccess)
            {
                Message = "User assigned successfully";
                await userModal.HideAsync();
            }
            else
            {
                Message = result.Message;
                if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
                {
                    Error += result.ValidationErrors;
                }
            }

        }
        catch (Exception ex)
        {
            Error = "User not found";
        }
    }
}
