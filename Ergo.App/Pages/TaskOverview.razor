@page "/taskoverview"
@using Ergo.App.Contracts
@using Ergo.App.ViewModels
@using Ergo.Domain.Entities.Enums;
@using BlazorBootstrap
@using Ergo.App.Components
@inject IJSRuntime JSRuntime
using Microsoft.JSInterop;


<style>
    body {
        background-color: #1f1f1f;
        color: #e0e0e0;
        font-family: 'Montserrat', sans-serif;
    }

    .card-text{
        font-size:14px;
    }
    .col-md-3 {
        background-color: #333;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        margin-right: 20px;
    }

    .card {
        background-color: #444;
        color: #ccc;
        border: none;
        margin-bottom: 20px;
        position: static;
    }

    .card:hover {
        opacity:0.8;
        border-radius: 10px;
        cursor: pointer;
    }

    h4 {
        color: #fff;
    }

    .col-md-3:nth-child(1) h4 {
        border-bottom: 3px solid #a249d1;
        border-radius: 2px;
    }

    .col-md-3:nth-child(2) h4 {
        border-bottom: 3px solid #4d91d1;
        border-radius: 2px;
    }

    .col-md-3:nth-child(3) h4 {
        border-bottom: 3px solid #60a88b;
        border-radius: 2px;
    }

    .bg-dark {
        background-color: #333 !important;
    }

    .bg-secondary-light {
        background-color: #ededed !important;
    }

    .text-light {
        color: #ccc !important;
    }

    .bg-secondary {
        background-color: #444 !important;
    }

    .fa-pencil {
        color: #d1c04d;
        font-size: 1rem;
    }


    .btn-edit {
        color: #fff;
        background-color: #333;
        border-color: #444
    }

        .btn-edit:hover {
            color: #fff;
            background-color: #444;
            border-color: #444
        }

    .btn-warning {
        color: #212529;
        background-color: #ffc107;
        border-color: #ffc107;
    }

    .edit-icon {
        width: 20px;
        transition: opacity 0.3s ease;
    }

    .edit-icon:hover {
        opacity: 0.7;
        cursor: pointer;
    }


    .cool-input {
        height: 3rem;
        border-radius: 3px;
        color: #d4d4d4;
        border: 2px solid #1f1f1f;
        background: #282828;
        font-size: 13px;
        outline: none;
    }

    .cool-input:focus, .cool-input:active {
        border: 1px solid rgba(105, 228, 150, 0.7);
        color: #d4d4d4;
        background: #282828;
        outline: none;
        box-shadow: 0 0 5px green;
    }

    .cool-button-2:hover {
        border-radius: 3px;
        border: 1px solid rgba(105, 228, 150, 0.7);
        box-shadow: 0 0 5px green;
    }

    .cool-button-2 {
        background: #282828;
        border-radius: 3px;
    }

    .cool-label {
        color: #d4d4d4;
        font-size: 15px;
    }

    .cool-form {
        background: #282828;
        border-radius: 4px;
        padding: 45px 60px;
        margin-top: 25px;
    }

    .cool-link {
        color: #b6b6b8;
    }

    .cool-link:hover {
        color: rgba(105, 228, 150, 0.7);
        text-decoration: none;
    }

</style>




<h3>Task Overview</h3>
<br />

@if (Tasks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Button Color="ButtonColor.Primary" @onclick="OnShowUserModalClick" class="cool-button">Add User</Button>

    <TaskAssignmentModal OnTaskCreated="HandleTaskCreated"></TaskAssignmentModal>
    @if (Message != null)
    {
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">Success</strong>
                    <button type="button" class="btn-close" @onclick="DismissSuccess" aria-label="Close"></button>
                </div>
                <div class="toast-body" style="color:green">
                    @Message
                </div>
            </div>
        </div>
    }
    <div class="row mt-2">
        <div class="col-md-3" style="border-radius:4px;" ondragover="allowDrop(event)" ondrop="drop(event, 'ToDo')">
            <h4 class="mb-4" style="font-size:20px;">To Do</h4>
            @foreach (var taskItem in Tasks.Where(task => task.State == TaskState.ToDo))
            {
                <div class="card mb-3" style="border-radius:4px; background: linear-gradient(to right, #a963cf, #a249d1);" draggable="true" @ondragstart="@(e => DragStart(e, taskItem.TaskItemId))" @onclick="() => {ShowDetailsModal(taskItem.TaskItemId); DisplayTaskId(taskItem.TaskItemId);}">
                    <div class="card-body style">
                        <h5 class="card-title">@taskItem.TaskName</h5>
                        <p class="card-text">@taskItem.Description</p>
                        <p class="card-text"><strong>Deadline:</strong> @taskItem.Deadline.ToShortDateString()</p>
                    </div>
                </div>
            }
        </div>

        <div class="col-md-3" style="border-radius:4px;" ondragover="allowDrop(event)" ondrop="drop(event, 'InProgress')">
            <h4 class="mb-4" style="font-size:20px;">In Progress</h4>
            @foreach (var taskItem in Tasks.Where(task => task.State == TaskState.InProgress))
            {
                <div class="card mb-3" style="border-radius:4px;background: linear-gradient(to right, #71a2d1, #4d91d1);" draggable="true" @ondragstart="@(e => DragStart(e, taskItem.TaskItemId))" @onclick="() => {ShowDetailsModal(taskItem.TaskItemId); DisplayTaskId(taskItem.TaskItemId);}">
                    <div class="card-body">
                        <h5 class="card-title">@taskItem.TaskName</h5>
                        <p class="card-text">@taskItem.Description</p>
                        <p class="card-text"><strong>Deadline:</strong> @taskItem.Deadline.ToShortDateString()</p>
                    </div>
                </div>
            }
        </div>

        <div class="col-md-3" style="border-radius:4px;" ondragover="allowDrop(event)" ondrop="drop(event, 'Done')">
            <h4 class="mb-4" style="font-size:20px;">Done</h4>
            @foreach (var taskItem in Tasks.Where(task => task.State == TaskState.Done))
            {
                <div class="card mb-3" style="border-radius:4px; background: linear-gradient(to right, #84b5a1, #60a88b);" draggable="true" @ondragstart="@(e => DragStart(e, taskItem.TaskItemId))" @onclick="() => {ShowDetailsModal(taskItem.TaskItemId); DisplayTaskId(taskItem.TaskItemId);}">
                    <div class="card-body">
                        <h5 class="card-title">@taskItem.TaskName</h5>
                        <p class="card-text">@taskItem.Description</p>
                        <p class="card-text"><strong>Deadline:</strong> @taskItem.Deadline.ToShortDateString()</p>
                    </div>
                </div>
            }
        </div>
    </div>


    <Modal @ref="commentModal" Title="Add a comment:">
        <BodyTemplate>
            <EditForm Model="@CommentViewModel">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <InputTextArea @bind-Value="@CommentViewModel.CommentText" class="form-control" rows="3" placeholder="Your comment..."></InputTextArea>
                </div>

                <div class="d-flex justify-content-end">
                    <button class="btn btn-primary" @onclick="HideCommentModal">Cancel</button>
                    <button type="submit" class="btn btn-primary mx-1" @onclick="SaveComment">Save Comment</button>
                </div>
            </EditForm>
        </BodyTemplate>
    </Modal>

    <Modal @ref="detailsModal" Title="Task Details">
        <BodyTemplate>
            <div class="modal-body text-dark">
                @if (selectedTask != null && !selectedTask.IsTitleEditMode)
                {
                    <h2 class="card-title">@selectedTask.TaskName</h2>
                    <img src="./edit.png" class="edit-icon" alt="Edit" @onclick="ToggleTitleEditMode" />
                }
                else
                {
                    <input class="form-control text-dark" @bind="selectedTask.TaskName" />
                    <div class="mt-2">
                        <button class="btn btn-outline-primary btn-sm" @onclick="SaveTitleEdit">Save</button>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="CancelTitleEdit">Cancel</button>
                    </div>
                }
                @if (selectedTask != null && !selectedTask.DescriptionEditMode)
                {
                    <h5 class="card-title mt-4 mb-2">Description</h5>
                    <p>@selectedTask.Description</p>
                    <img src="./edit.png" class="edit-icon" alt="Edit" @onclick="ToggleDescriptionEditMode" />
                }
                else
                {
                    <textarea class="form-control text-dark mt-4" @bind="selectedTask.Description"></textarea>
                    <div class="mt-4">
                        <button class="btn btn-outline-primary btn-sm" @onclick="SaveDescriptionEdit">Save</button>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="CancelDescriptionEdit">Cancel</button>
                    </div>
                }

                <h5 class="mt-4">Comments:</h5>



                <ul class="list-unstyled">
                    @foreach (var comment in commentsList)
                    {
                        <li class="mb-2" title="Last modified: @comment.LastModifiedDate.ToString()">
                            @if (commentBeingEdited != null && commentBeingEdited.CommentId == comment.CommentId)
                            {
                                <textarea class="form-control text-dark" @bind="commentBeingEdited.CommentText"></textarea>
                                <div class="mt-2">
                                    <button class="btn btn-outline-primary btn-sm" @onclick="SaveCommentEdit">Save</button>
                                    <button class="btn btn-outline-secondary btn-sm" @onclick="CancelCommentEdit">Cancel</button>
                                </div>
                            }
                            else
                            {
                                <div class="d-flex justify-content-between align-items-center bg-secondary-light text-dark p-2 rounded">
                                    <div class="justify-content-center align-items-center">
                                        <strong>@comment.CreatedBy:</strong> @comment.CommentText
                                        <p>@comment.LastModifiedDate.ToString()</p>
                                    </div>
                                    @if (comment.CanEdit)
                                    {
                                        <img src="./edit.png" class="edit-icon" alt="Edit" @onclick="() => {DisplayCommentId(comment.CommentId);BeginEditComment(comment);}" />
                                    }
                                </div>
                            }
                        </li>
                    }
                </ul>

                <div class="mb-2">
                    <InputText @bind-Value="@CommentViewModel.CommentText" class="form-control" placeholder="Your comment..."></InputText>
                </div>

                <div>
                    <button type="submit" class="btn btn-outline-primary btn-sm mb-4" @onclick="SaveComment">Submit</button>
                </div>
            </div>
        </BodyTemplate>
    </Modal>

    @* ------------ USER -------------- *@




    <Modal @ref="userModal" Title="Add a user to this project:">
        <BodyTemplate>
            <EditForm Model="@ProjectAssignUserViewModel">

                <DataAnnotationsValidator />
                <ValidationSummary></ValidationSummary>

                <div class="row mb-3 ms-2">
                    <label for="taskname" class="col-sm-3 form-label" style="color:black;">User email:</label>
                    <div class="col-sm-7">
                        <InputText id="username" class="form-control" @bind-Value="@ProjectAssignUserViewModel.Email" placeholder="User email..."></InputText>
                        <ValidationMessage For="@(() => ProjectAssignUserViewModel.Email)" />
                    </div>
                </div>


                <div class="d-flex">
                    <button class="btn btn-primary" @onclick="OnHideUserModalClick">Cancel</button>
                    <button type="submit" class="btn btn-primary mx-1" @onclick="HandleValidUserSubmit">Add user</button>
                </div>

            </EditForm>
        </BodyTemplate>
    </Modal>

    @if (Error != null)
    {
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">Error</strong>
                    <button type="button" class="btn-close" @onclick="DismissError" aria-label="Close"></button>
                </div>
                <div class="toast-body" style="color:red">
                    @Error
                </div>
            </div>
        </div>
    }
}

@code {

    [Inject]
    public IUserDataService UserDataService { get; set; }

    [Inject]
    public ITaskDataService TaskDataService { get; set; }

    [Inject] ICommentDataService CommentDataService { get; set; }

    [Inject] IProjectDataService ProjectDataService { get; set; }

    [Inject]
    IInboxItemDataService InboxItemDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }


    public ProjectAssignUserViewModel ProjectAssignUserViewModel { get; set; } = new ProjectAssignUserViewModel();
    public string Error { get; set; }

    public List<TaskViewModel> Tasks { get; set; }

    private List<CommentViewModel> commentsList = new List<CommentViewModel>();
    public UpdateTaskViewModel UpdateTaskViewModel { get; set; } = new UpdateTaskViewModel();

    public TaskViewModel TaskViewModel { get; set; } = new TaskViewModel();

    private TaskViewModel? selectedTask;

    public CommentViewModel CommentViewModel { get; set; } = new CommentViewModel();

    private CommentViewModel? commentBeingEdited;

    public string Message { get; set; }

    private Modal modal = default!;

    private Guid selectedTaskId;
    private Guid selectedCommentId;

    private Modal commentModal = default!;

    private Modal detailsModal = default!;

    private Modal userModal = default!;

    private string projectId = default!;


    private async Task DragStart(dynamic e, Guid taskId)
    {
        await JSRuntime.InvokeAsync<object>("dragStart", taskId);
    }


    private void ToggleDescriptionEditMode()
    {
        if (selectedTask != null)
        {
            selectedTask.DescriptionEditMode = true;
        }
    }
    private async Task SaveDescriptionEdit()
    {
        if (selectedTask != null)
        {
            selectedTask.DescriptionEditMode = false;

            var updateTaskDto = new UpdateTaskDto
                {
                    TaskItemId = selectedTask.TaskItemId,
                    TaskName = selectedTask.TaskName,
                    Description = selectedTask.Description,
                    CreatedBy = selectedTask.CreatedBy,
                    Deadline = selectedTask.Deadline,
                    State = selectedTask.State

                };

            var result = await TaskDataService.UpdateTaskAsync(updateTaskDto);

            if (result.IsSuccess)
            {
                Message = "Description updated successfully";
            }
            else
            {
                Message = "Failed to update description";
            }
        }
    }


    private void CancelDescriptionEdit()
    {
        if (selectedTask != null)
        {
            selectedTask.DescriptionEditMode = false;
        }
    }

    protected async override Task OnInitializedAsync()
    {
        await FetchAllTasks();

        var dotNetObjectRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("initializeDropHandling", dotNetObjectRef);

    }

    private void BeginEditComment(CommentViewModel comment)
    {

        commentBeingEdited = comment;
    }

    private async Task SaveCommentEdit()
    {
        var username = await TaskDataService.GetUsernameFromTokenAsync();
        if (string.IsNullOrEmpty(username))
        {
            Message = "Unable to retrieve user email from token.";
            return;
        }

        if (commentBeingEdited != null)
        {
            commentBeingEdited.CommentId = selectedCommentId;
            commentBeingEdited.CreatedBy = username;
            commentBeingEdited.LastModifiedBy = username;
            commentBeingEdited.LastModifiedDate = DateTime.UtcNow;
            commentBeingEdited.TaskId = selectedTaskId;


            var updateCommentDto = new UpdateCommentDto
                {
                    CommentId = commentBeingEdited.CommentId,
                    CreatedBy = commentBeingEdited.CreatedBy,
                    CommentText = commentBeingEdited.CommentText,
                    LastModifiedBy = commentBeingEdited.LastModifiedBy,
                    LastModifiedDate = commentBeingEdited.LastModifiedDate,
                    TaskId = commentBeingEdited.TaskId

                };


            var response = await CommentDataService.UpdateCommentAsync(updateCommentDto);

            if (response.IsSuccess)
            {
                Message = "Comment updated successfully";
                await FetchCommentsForSelectedTask(selectedTaskId);
            }
            else
            {
                Message = response.Message;
                if (!string.IsNullOrWhiteSpace(response.ValidationErrors))
                {
                    Message += response.ValidationErrors;
                }

            }

            commentBeingEdited = null;
        }
    }


    private void CancelCommentEdit()
    {
        commentBeingEdited = null;
    }



    private async Task ShowDetailsModal(Guid taskId)
    {
        selectedTask = Tasks.FirstOrDefault(t => t.TaskItemId == taskId);

        var comments = await CommentDataService.GetCommentsByTaskIdAsync(taskId);

        var currentUser = await TaskDataService.GetUsernameFromTokenAsync();


        commentsList = comments.Select(comment => new CommentViewModel
            {
                CommentId = comment.CommentId,
                CommentText = comment.CommentText,
                CreatedBy = comment.CreatedBy,
                LastModifiedDate = comment.LastModifiedDate,
                CanEdit = ShouldAllowEdit(comment, currentUser)
            }).ToList();

        await detailsModal.ShowAsync();
    }


    private bool ShouldAllowEdit(CommentViewModel comment, string currentUser)
    {
        return comment.CreatedBy == currentUser;
    }


    private void DisplayTaskId(Guid taskId)
    {
        selectedTaskId = taskId;

    }

    private void DisplayCommentId(Guid commentId)
    {
        selectedCommentId = commentId;
        Console.WriteLine("Selected Comment ID: " + selectedCommentId);
    }
    private async Task HideCommentModal()
    {
        await commentModal.HideAsync();
        Console.WriteLine("A mers sa se inchida");
    }

    private async Task SaveComment()
    {
        try
        {
            var username = await TaskDataService.GetUsernameFromTokenAsync();

            if (string.IsNullOrEmpty(username))
            {
                Message = "Unable to retrieve user email from token.";
                return;
            }

            CommentViewModel.CreatedBy = username;
            CommentViewModel.LastModifiedBy = username;
            CommentViewModel.TaskId = selectedTaskId;
            var result = await CommentDataService.CreateCommentAsync(CommentViewModel);
            if (result.IsSuccess)
            {
                Message = "Comment created successfully";
                await FetchCommentsForSelectedTask(selectedTaskId);

            }
            else
            {
                Message = result.Message;
                if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
                {
                    Message += result.ValidationErrors;
                }
            }
        }
        catch (Exception ex)
        {
            Message = $"Error creating comment: {ex.Message}";
        }
    }

    private async Task HandleTaskCreated()
    {
        await FetchAllTasks();
    }

    private async Task ShowCommentModal(Guid taskId)
    {
        CommentViewModel.TaskId = taskId;
        Console.WriteLine(CommentViewModel.TaskId);
        await commentModal.ShowAsync();
    }


    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }



    private async Task FetchAllTasks()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = uri.Query;

        TaskViewModel.Deadline = DateTime.UtcNow.Date;

        if (!string.IsNullOrEmpty(query))
        {
            var queryParams = System.Web.HttpUtility.ParseQueryString(query);
            projectId = queryParams.Get("projectId");

            if (!string.IsNullOrEmpty(projectId))
            {
                Tasks = await TaskDataService.GetTasksByProjectIdAsync(Guid.Parse(projectId));
            }
        }
    }


    private void ToggleTitleEditMode()
    {
        if (selectedTask != null)
        {
            selectedTask.IsTitleEditMode = true;
        }
    }

    private async Task SaveTitleEdit()
    {
        if (selectedTask != null)
        {
            selectedTask.IsTitleEditMode = false;

            var updateTaskDto = new UpdateTaskDto
                {
                    TaskItemId = selectedTask.TaskItemId,
                    TaskName = selectedTask.TaskName,
                    Description = selectedTask.Description,
                    CreatedBy = selectedTask.CreatedBy,
                    Deadline = selectedTask.Deadline,
                    State = selectedTask.State
                };

            var result = await TaskDataService.UpdateTaskAsync(updateTaskDto);

            if (result.IsSuccess)
            {
                Message = "Title updated successfully";
            }
            else
            {
                Message = "Failed to update title";
            }
        }
    }

    private void CancelTitleEdit()
    {
        if (selectedTask != null)
        {
            selectedTask.IsTitleEditMode = false;
        }
    }

    private void DismissSuccess()
    {
        Message = null;
    }

    private async Task FetchCommentsForSelectedTask(Guid taskId)
    {
        var comments = await CommentDataService.GetCommentsByTaskIdAsync(taskId);

        var currentUser = await TaskDataService.GetUsernameFromTokenAsync();

        commentsList = comments.Select(comment => new CommentViewModel
            {
                CommentId = comment.CommentId,
                CommentText = comment.CommentText,
                CreatedBy = comment.CreatedBy,
                LastModifiedDate = comment.LastModifiedDate,
                CanEdit = ShouldAllowEdit(comment, currentUser)
            }).ToList();
    }

    private async Task OnShowUserModalClick()
    {
        await userModal.ShowAsync();
    }
    private async Task OnHideUserModalClick()
    {
        await userModal.HideAsync();
    }

    private void DismissError()
    {
        Error = null;
    }
    private async Task HandleValidUserSubmit()
    {
        try
        {
            var email = ProjectAssignUserViewModel.Email;
            var userId = await UserDataService.GetUserIdByEmailAsync(email);

            if (userId == null)
            {
                Error = "User not found.";
                Message = null;
                return;
            }
            ProjectAssignUserViewModel.ProjectId = projectId;
            ProjectAssignUserViewModel.UserId = userId;

            var projects = await ProjectDataService.GetProjectsByUserIdAsync(userId);
            foreach (var project in projects)
            {
                if (project.ProjectId ==  Guid.Parse(projectId))
                {
                    Error = "User is already assigned to this project.";
                    Message = null;
                    return;
                }
            }

            var result = await ProjectDataService.AssignUserToProjectAsync(ProjectAssignUserViewModel);
            if (result.IsSuccess)
            {
                Message = "User assigned successfully";
                Error = null;
                await userModal.HideAsync();
            }
            else
            {
                Message = result.Message;
                if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
                {
                    Error += result.ValidationErrors;
                }
            }
            projects = await ProjectDataService.GetProjectsByUserIdAsync(userId);
            string projectName = "project";
            foreach (var project in projects)
            {
                if (project.ProjectId == Guid.Parse(projectId))
                {
                    projectName = project.ProjectName;
                    break;
                }
            }
            //send notification to user
            var inboxItem = new InboxItemViewModel
            {
                UserId = userId,
                Message = 
                    $"You have been assigned to a new project \"{projectName}\".",
                CreatedDate = DateTime.UtcNow,
                IsRead = false
            };
            
            await InboxItemDataService.CreateInboxItemAsync(inboxItem);

        }
        catch (Exception ex)
        {
            Error = "User not found";
            Message = null;
        }
    }

    [JSInvokable]
    public async Task HandleDragTaskItem(string taskIdValue, string column)
    {
        if (!Guid.TryParse(taskIdValue, out var taskId))
        {
            return;
        }

        var updateTaskDto = new UpdateTaskDto
        {
            TaskItemId = taskId,
            State = (TaskState)Enum.Parse(typeof(TaskState), column)
        };
        var result = await TaskDataService.UpdateTaskAsync(updateTaskDto);

        if (result.IsSuccess)
        {
            Message = "Status updated successfully";
            await FetchAllTasks();
            StateHasChanged();
        }
        else
        {
            Message = "Failed to update status";
        }
    }
}

<script>
    window.dragStart = (taskId) => {
        localStorage.setItem('draggedTaskId', taskId);
    }

    window.allowDrop = (e) => {
        e.preventDefault();
    }

    window.initializeDropHandling = (dotNetObjectRef) => {
        window.drop = (e, column) => {
            e.preventDefault();
            const taskId = localStorage.getItem('draggedTaskId');
            dotNetObjectRef.invokeMethodAsync('HandleDragTaskItem', taskId, column);
        };
    };
</script>