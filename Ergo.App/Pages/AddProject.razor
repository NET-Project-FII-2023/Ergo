@page "/addproject"
@using Ergo.App.Contracts
@using Ergo.App.ViewModels

<style>
    .cool-input{
        height:3rem;
        border-radius:3px;
        color: #d4d4d4;
        border: 2px solid #1f1f1f;
        background: #282828;
        font-size:13px;
        outline: none;
    }

    .cool-input:focus, .cool-input:active{
        border: 1px solid rgba(105, 228, 150, 0.7);
        color: #d4d4d4;
        background: #282828;
        outline:none;
        box-shadow: 0 0 5px green;
    }

    .cool-button{
        margin-top:1rem;
        border-radius: 3px;
        background: rgba(105, 228, 150, 0.7);
    }

    .cool-button:hover{
            border: 1px solid rgba(105, 228, 150, 0.7);
            box-shadow: 0 0 5px green;
    }

    .cool-label{
        color: #d4d4d4;
        font-size:15px;
    }
    .cool-form{
        background: #282828;
        border-radius: 4px;
        padding: 45px 100px;
        margin-top: 25px;
    }

</style>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-5 cool-form">
            <EditForm Model="@ProjectViewModel" OnValidSubmit="@HandleValidSubmit" >
                <h3 class="mb-4">New Project</h3>
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3 d-flex flex-column">
                    <label for="projectname" class="form-label cool-label">Project name:</label>
                    <InputText id="projectname" class="form-control cool-input" @bind-Value="@ProjectViewModel.ProjectName" placeholder="Project name..." />
                    <ValidationMessage For="@(() => ProjectViewModel.ProjectName)" />
                </div>

                <div class="mb-3 d-flex flex-column">
                    <label for="taskdescription" class="form-label cool-label">Project description:</label>
                    <InputText id="taskdescription" class="form-control cool-input" @bind-Value="@ProjectViewModel.Description" placeholder="Project description..." />
                    <ValidationMessage For="@(() => ProjectViewModel.Description)" />
                </div>

                <div class="mb-3 d-flex flex-column">
                    <label for="deadline" class="form-label cool-label">Deadline:</label>
                    <InputDate id="deadline" class="form-control cool-input" @bind-Value="@ProjectViewModel.Deadline" />
                    <ValidationMessage For="@(() => ProjectViewModel.Deadline)" />
                </div>

                <div class="mb-3 d-flex flex-column">
                    <label for="gitrepository" class="form-label cool-label">Git Repository <span class="text-muted">(optional)</span>:</label>
                    <InputText id="gitrepository" class="form-control cool-input" @bind-Value="@ProjectViewModel.GitRepository" placeholder="Git repository..." />
                    <ValidationMessage For="@(() => ProjectViewModel.GitRepository)" />
                </div>

                <div class="text-center">
                    <button type="submit" style="min-width: 150px;" class="btn btn-primary cool-button">Save project</button>
                </div>
            </EditForm>

            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="mt-3 alert alert-info" role="alert">@Message</div>
            }
        </div>
    </div>

</div>




@code {
    [Inject]
    public IProjectDataService ProjectDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public ProjectViewModel ProjectViewModel { get; set; } = new ProjectViewModel();

    public string Message { get; set; }
}

@functions {
    protected override void OnInitialized()
    {
        ProjectViewModel.Deadline = DateTime.UtcNow.Date;
    }

    private async Task HandleValidSubmit()
    {
        if (DateTime.TryParse(ProjectViewModel.Deadline.ToString(), out DateTime inputDate))
        {
            ProjectViewModel.Deadline = inputDate.ToUniversalTime();
        }
        else
        {
            Message = "Invalid date format. Please enter a valid date.";
            return;
        }

        var result = await ProjectDataService.CreateProjectAsync(ProjectViewModel);
        if (result.IsSuccess)
        {
            Message = "Project created successfully";
            NavigationManager.NavigateTo(result.Data != null ? $"/taskoverview?projectId={result.Data.ProjectId}" : "/", forceLoad: true);
        }
        else
        {
            Message = result.Message;
            if(!string.IsNullOrEmpty(result.ValidationErrors))
            {
                Message += result.ValidationErrors;
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
}


