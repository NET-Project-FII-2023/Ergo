@page "/userprofile"
@using Ergo.App.Contracts
@using Ergo.App.ViewModels
@using Ergo.App.Auth
@inject CustomStateProvider authStateProvider

<h3>UserProfile</h3>

@if (User != null)
{
    <div class="container">
        <div class="row mb-3">
            <label class="col-sm-2 col-form-label">Username:</label>
            <div class="col-sm-10">
                <input class="form-control" @bind="User.Username" />
            </div>
        </div>

        <div class="row mb-3">
            <label class="col-sm-2 col-form-label">Name:</label>
            <div class="col-sm-10">
                <input class="form-control" @bind="User.Name" />
            </div>
        </div>

        <div class="row mb-3">
            <label class="col-sm-2 col-form-label">Email:</label>
            <div class="col-sm-10">
                <input class="form-control" @bind="User.Email" />
            </div>
        </div>

        <div class="row">
            <div class="col-sm-10 offset-sm-2">
                <button class="btn btn-primary" @onclick="UpdateProfile">Update Profile</button>
            </div>

            <div class="nav-item px-3">
                <button class="btn btn-lg btn-primary btn-block" @onclick="Logout">Logout</button>
            </div>
        </div>
    </div>
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">Update Profile Error</strong>
                    <button type="button" class="btn-close" @onclick="DismissError" aria-label="Close"></button>
                </div>
                <div class="toast-body" style="color:red">
                    @error
                </div>
            </div>
        </div>
    }
    @if (!string.IsNullOrEmpty(Message))
    {
        
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">Update Profile</strong>
                    <button type="button" class="btn-close" @onclick="DismissMessage" aria-label="Close"></button>
                </div>
                <div class="toast-body" style="color:green">
                    @Message
                </div>
            </div>
        </div>
    }
}
else
{
    <p>Loading...</p>
}

@code {
    [Inject]
    public IUserDataService UserDataService { get; set; }
    [Inject]
    public ITokenService TokenService { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    public UserViewModel User { get; set; }
    private string email;
    private string error;
    public string Message { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var token = await TokenService.GetTokenAsync();
        email = await TokenService.DecodeEmailFromTokenAsync(token);

        if (!string.IsNullOrEmpty(email))
        {
            User = await UserDataService.GetUserByEmailAsync(email);
        }
    }

    private async Task UpdateProfile()
    {

        try
        {
            UpdateUserDto updateUserDto = new UpdateUserDto
                {
                    Id = User.UserId,
                    Username = User.Username,
                    Name = User.Name,
                    Email = User.Email
                };
            Console.WriteLine("Updating user profile");

            var result = await UserDataService.UpdateUserAsync(User.UserId, updateUserDto);

            if (result.IsSuccess)
            {
                Message = "Profile updated successfully";
                NavigationManager.NavigateTo($"/userprofile");
                await authStateProvider.Logout();
                NavigationManager.NavigateTo("/login");
            }

        }
        catch (Exception ex)
        {
            error = "Something went wrong updating the profile";
        }
    }


}

@functions
{
    private void DismissError()
    {
        error = null;
    }

    private void DismissMessage()
    {
        Message = null;
    }

    private async Task Logout()
    {
        await authStateProvider.Logout();
        NavigationManager.NavigateTo("/login");
    }
}
