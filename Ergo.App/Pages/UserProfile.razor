@page "/userprofile"
@using Ergo.App.Contracts
@using Ergo.App.ViewModels
@using Ergo.App.Auth
@inject CustomStateProvider authStateProvider

<style>
    .cool-input {
        height: 3rem;
        border-radius: 3px;
        color: #d4d4d4;
        border: 2px solid #1f1f1f;
        background: #282828;
        font-size: 13px;
        outline: none;
    }

    .cool-input:focus, .cool-input:active {
        border: 1px solid rgba(105, 228, 150, 0.7);
        color: #d4d4d4;
        background: #282828;
        outline: none;
        box-shadow: 0 0 5px green;
    }

    .cool-button {
        text-align:center;
        height:2.5rem;
        margin-top: 1rem;
        border-radius: 3px;
        background: rgba(105, 228, 150, 0.7);
    }

    .cool-button:hover {
        border: 1px solid rgba(105, 228, 150, 0.7);
        box-shadow: 0 0 5px green;
    }

    .cool-label {
        color: #d4d4d4;
        font-size: 15px;
    }
</style>




@if (User != null)
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-5 cool-form" style="margin-top:5rem;">
                <h3>Profile</h3>
                <div class="mb-3">
                    <label class="form-label cool-label">Username:</label>
                    <input class="form-control cool-input" @bind="User.Username" />
                </div>

                <div class="mb-3">
                    <label class="form-label cool-label">Name:</label>
                    <input class="form-control cool-input" @bind="User.Name" />
                </div>

                <div class="mb-3">
                    <label class="form-label cool-label">Email:</label>
                    <input class="form-control cool-input" @bind="User.Email" />
                </div>
                <div class="column">
                    <button class="btn btn-primary cool-button" @onclick="UpdateProfile">Update Profile</button>
                    <button class="btn btn-primary cool-button" @onclick="Logout">Logout</button>
                </div>
      
                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="toast-container position-fixed bottom-0 end-0 p-3">
                        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                            <div class="toast-header">
                                <strong class="me-auto">Update Profile Error</strong>
                                <button type="button" class="btn-close" @onclick="DismissError" aria-label="Close"></button>
                            </div>
                            <div class="toast-body" style="color:red">
                                @error
                            </div>
                        </div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Message))
                {

                    <div class="toast-container position-fixed bottom-0 end-0 p-3">
                        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                            <div class="toast-header">
                                <strong class="me-auto">Update Profile</strong>
                                <button type="button" class="btn-close" @onclick="DismissMessage" aria-label="Close"></button>
                            </div>
                            <div class="toast-body" style="color:green">
                                @Message
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    [Inject]
    public IUserDataService UserDataService { get; set; }
    [Inject]
    public ITokenService TokenService { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    public UserViewModel User { get; set; }
    private string email;
    private string error;
    public string Message { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var token = await TokenService.GetTokenAsync();
        email = await TokenService.DecodeEmailFromTokenAsync(token);

        if (!string.IsNullOrEmpty(email))
        {
            User = await UserDataService.GetUserByEmailAsync(email);
        }
    }

    private async Task UpdateProfile()
    {

        try
        {
            UpdateUserDto updateUserDto = new UpdateUserDto
                {
                    Id = User.UserId,
                    Username = User.Username,
                    Name = User.Name,
                    Email = User.Email
                };
            Console.WriteLine("Updating user profile");

            var result = await UserDataService.UpdateUserAsync(User.UserId, updateUserDto);

            if (result.IsSuccess)
            {
                Message = "Profile updated successfully";
                NavigationManager.NavigateTo($"/userprofile");
                await authStateProvider.Logout();
                NavigationManager.NavigateTo("/login");
            }

        }
        catch (Exception ex)
        {
            error = "Something went wrong updating the profile";
        }
    }


}

@functions
{
    private void DismissError()
    {
        error = null;
    }

    private void DismissMessage()
    {
        Message = null;
    }

    private async Task Logout()
    {
        await authStateProvider.Logout();
        NavigationManager.NavigateTo("/login");
    }
}
