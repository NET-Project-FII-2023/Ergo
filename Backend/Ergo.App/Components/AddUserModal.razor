@using Ergo.App.Contracts
@using Ergo.App.ViewModels
@using Ergo.Domain.Entities.Enums;
@using BlazorBootstrap
@using Ergo.App.Components


<Modal @ref="userModal" Title="Add a member to this project:">
    <BodyTemplate>
        <EditForm Model="@ProjectAssignUserViewModel">

            <DataAnnotationsValidator />
            <ValidationSummary></ValidationSummary>

            <div class="row mb-3 ms-2">
                <label for="taskname" class="col-sm-3 form-label" style="color:black;">User email:</label>
                <div class="col-sm-7">
                    <InputText id="username" class="form-control" @bind-Value="@ProjectAssignUserViewModel.Email" placeholder="User email..."></InputText>
                    <ValidationMessage For="@(() => ProjectAssignUserViewModel.Email)" />
                </div>
            </div>


            <div class="d-flex">
                <button class="btn btn-primary" @onclick="OnHideUserModalClick">Cancel</button>
                <button type="submit" class="btn btn-primary mx-1" @onclick="HandleValidUserSubmit">Add user</button>
            </div>

        </EditForm>
    </BodyTemplate>
</Modal>

<Button Color="ButtonColor.Primary" @onclick="OnShowUserModalClick" class="cool-button" style="margin:0; background:rgba(105, 228, 150, 0.7);">Add Member</Button>

@if (Error != null)
{
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto">Error</strong>
                <button type="button" class="btn-close" @onclick="DismissError" aria-label="Close"></button>
            </div>
            <div class="toast-body" style="color:red">
                @Error
            </div>
        </div>
    </div>
}

@if (Message != null)
{
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto">Success</strong>
                <button type="button" class="btn-close" @onclick="DismissSuccess" aria-label="Close"></button>
            </div>
            <div class="toast-body" style="color:green">
                @Message
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback OnUserAdded { get; set; }

    [Inject]
    IProjectDataService ProjectDataService { get; set; }

    [Inject]
    public IUserDataService UserDataService { get; set; }

    [Inject]
    IInboxItemDataService InboxItemDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public ProjectAssignUserViewModel ProjectAssignUserViewModel { get; set; } = new ProjectAssignUserViewModel();

    private string projectId = default!;

    private Modal userModal = default!;

    public string Error { get; set; }

    public string Message { get; set; }


    protected async override Task OnInitializedAsync()
    {
        try
        {
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var query = uri.Query;
            if (!string.IsNullOrEmpty(query))
            {
                var queryParams = System.Web.HttpUtility.ParseQueryString(query);
                projectId = queryParams.Get("projectId");

                if (!string.IsNullOrEmpty(projectId))
                {
                    Console.WriteLine($"---- Sunt proiectul: " + projectId);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching assigned users: {ex.Message}");
        }
    }

    private async Task OnShowUserModalClick()
    {
        await userModal.ShowAsync();
    }

    private async Task OnHideUserModalClick()
    {
        await userModal.HideAsync();
    }



    private async Task HandleValidUserSubmit()
    {
        try
        {
            var email = ProjectAssignUserViewModel.Email;
            var userId = await UserDataService.GetUserIdByEmailAsync(email);

            if (userId == null)
            {
                Error = "User not found.";
                Message = null;
                return;
            }
            ProjectAssignUserViewModel.ProjectId = projectId;
            ProjectAssignUserViewModel.UserId = userId;

            var projects = await ProjectDataService.GetProjectsByUserIdAsync(userId);
            foreach (var project in projects)
            {
                if (project.ProjectId == Guid.Parse(projectId))
                {
                    Error = "User is already assigned to this project.";
                    Message = null;
                    return;
                }
            }

            var result = await ProjectDataService.AssignUserToProjectAsync(ProjectAssignUserViewModel);
            if (result.IsSuccess)
            {
                Message = "User assigned successfully";
                Error = null;
                await OnUserAdded.InvokeAsync(null);
                await userModal.HideAsync();
            }
            else
            {
                Message = result.Message;
                if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
                {
                    Error += result.ValidationErrors;
                }
            }
            projects = await ProjectDataService.GetProjectsByUserIdAsync(userId);
            string projectName = "project";
            foreach (var project in projects)
            {
                if (project.ProjectId == Guid.Parse(projectId))
                {
                    projectName = project.ProjectName;
                    break;
                }
            }
            var inboxItem = new InboxItemViewModel
                {
                    UserId = userId,
                    Message =
                            $"You have been assigned to a new project \"{projectName}\".",
                    CreatedDate = DateTime.UtcNow,
                    IsRead = false
                };

            await InboxItemDataService.CreateInboxItemAsync(inboxItem);

        }
        catch (Exception ex)
        {
            Error = "User not found";
            Message = null;
        }
    }

    private void DismissError()
    {
        Error = null;
    }

    private void DismissSuccess()
    {
        Message = null;
    }

}