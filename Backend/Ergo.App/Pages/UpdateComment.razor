@page "/updatecomment"

@using Ergo.App.Contracts
@using Ergo.App.ViewModels

<h3>Update Comment</h3>

<EditForm Model="@UpdateCommentViewModel"  OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="row mb-3 ms-2">
        <label for="commentid" class="col-sm-3 form-label">Comment Id:</label>
        <div class="col-sm-5">
            <InputText id="commentid" class="form-control" @bind-Value="@CommentIdInput" placeholder="Comment Id..."></InputText>
            <ValidationMessage For="@(() => CommentIdInput)"/>
        </div>
    </div>
    
    <div class="row mb-3 ms-2">
        <label for="createdby" class="col-sm-3 form-label">Created By:</label>
        <div class="col-sm-5">
            <InputText id="createdby" class="form-control" @bind-Value="@UpdateCommentViewModel.CreatedBy" placeholder="Created By..."></InputText>
            <ValidationMessage For="@(() => UpdateCommentViewModel.CreatedBy)" />
        </div>
    </div>
    
    <div class="row mb-3 ms-2">
        <label for="lastmodifiedby" class="col-sm-3 form-label">Last Modified By:</label>
        <div class="col-sm-5">
            <InputText id="lastmodifiedby" class="form-control" @bind-Value="@UpdateCommentViewModel.LastModifiedBy" placeholder="Last Modified By..."></InputText>
            <ValidationMessage For="@(() => UpdateCommentViewModel.LastModifiedBy)" />
        </div>
    </div>
    
    <div class="row mb-3 ms-2">
        <label for="commenttext" class="col-sm-3 form-label">Comment Text:</label>
        <div class="col-sm-5">
            <InputText id="commenttext" class="form-control" @bind-Value="@UpdateCommentViewModel.CommentText" placeholder="Comment Text..."></InputText>
            <ValidationMessage For="@(() => UpdateCommentViewModel.CommentText)" />
        </div>
    </div>
    
    <div class="row mb-3 ms-2">
        <label for="taskid" class="col-sm-3 form-label">Task Id:</label>
        <div class="col-sm-5">
            <InputText id="taskid" class="form-control" @bind-Value="@TaskIdInput" placeholder="Task Id..."></InputText>
            <ValidationMessage For="@(() => TaskIdInput)" />
        </div>
    </div>
    
    <button type="submit" class="btn btn-primary">Submit</button>
    
</EditForm>

@code{

    [Inject]
    public ICommentDataService CommentDataService { get; set; }
    
    [Inject]
    NavigationManager NavigationManager { get; set; }
    
    public UpdateCommentViewModel UpdateCommentViewModel { get; set; } = new UpdateCommentViewModel();

    public string Message { get; set; } = "";

    public string CommentIdInput { get; set; } = "";
    public string TaskIdInput { get; set; } = "";
    
    
    private async Task HandleValidSubmit()
    {
        UpdateCommentDto updateCommentDto = new UpdateCommentDto
        {
            CommentId = UpdateCommentViewModel.CommentId,
            CreatedBy = UpdateCommentViewModel.CreatedBy,
            LastModifiedBy = UpdateCommentViewModel.LastModifiedBy,
            LastModifiedDate = DateTime.Now,
            CommentText = UpdateCommentViewModel.CommentText,
            TaskId = UpdateCommentViewModel.TaskId
        };
        
        updateCommentDto.CommentId = Guid.Parse(CommentIdInput);
        updateCommentDto.TaskId = Guid.Parse(TaskIdInput);
        
        var result = await CommentDataService.UpdateCommentAsync(updateCommentDto);
        if (result.IsSuccess)
        {
            Message = "Comment created successfully";
            NavigationManager.NavigateTo($"commentoverview?taskId={updateCommentDto.TaskId}");
        }
        else
        {
            Message = result.Message;
            if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
            {
                Message += result.ValidationErrors;
            }
        }
    }

}